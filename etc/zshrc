#zmodload zsh/zprof

if [ -f "$HOME/.zshrc.local" ]; then
    source "$HOME/.zshrc.local"
fi

CONFIG_DIR=${CONFIG_DIR:-"$HOME/.vim/etc"}

#if  [ -f "$CONFIG_DIR/../plugged/vim-solarized8/scripts/solarized8.sh" ]; then
#    bash "$CONFIG_DIR/../plugged/vim-solarized8/scripts/solarized8.sh"
#fi

export EDITOR=${EDITOR:-"vim"}
export VISUAL=${VISUAL:-"vim"}
export PAGER=${PAGER:-"less"}

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'
# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi

# disable terminal <c-s>
stty -ixon

# WSL (aka Bash for Windows) doesn't work well with BG_NICE
[ -d "/mnt/c" ] && [[ "$(uname -a)" == *Microsoft* ]] && {
    export PATH=$PATH:/mnt/d/tool/scoop/shims:/mnt/c/Windows/System32
    # disable nice(5) failed
    unsetopt BG_NICE
    # autoset dns
    DNS=$(/mnt/c/Windows/System32/ipconfig.exe /all | grep -P "DNS Servers.*?([0-9]+\.){3}[0-9]+" | cut -d: -f2)
    [[ -n $DNS ]] && echo "nameserver $DNS" > /etc/resolv.conf
    echo "nameserver 114.114.114.114" >> /etc/resolv.conf
    # docker
    type docker-machine.exe >/dev/null 2>&1 && {
        export DOCKER_TLS_VERIFY=1
        export DOCKER_CERT_PATH=$HOME/tool/.docker/machine/machines/default    #ln from windows user folder
        export DOCKER_HOST=${DOCKER_HOST:-"tcp://192.168.99.50:2376"}
    }

    alias cmd='cmd.exe'
    alias docker-machine='docker-machine.exe'
}

# screen-256color xterm-256color
#TERM=${ZSH_TERM:-"xterm-256color"}

# zh_CN.UTF-8 en_US.UTF-8
export LANG=${ZSH_LANG:-"en_US.UTF-8"}
export LC_ALL=$LANG
export LANGUAGE=${ZSH_LANGUAGE:-"en_US:en"}

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath PATH

# Set the list of directories that Zsh searches for programs.
export GOPATH=$HOME/go
export QT_VERSION=5.12.1
#export GO111MODULE=on
export QT_DIR=$HOME/qt
#export QT_WEBKIT=true
LD_LIBRARY_PATH=$HOME/bin/lib:$QT_DIR/$QT_VERSION/gcc_64/lib:$LD_LIBRARY_PATH
PKG_CONFIG_PATH=$HOME/qt/$QT_VERSION/gcc_64/lib/pkgconfig:$PKG_CONFIG_PATH
PYTHONPATH=$PYTHONPATH:$HOME/tool/python_script
export RIPGREP_CONFIG_PATH=$CONFIG_DIR/ripgreprc
export SHELLCHECK_OPTS="-e SC2164 -e SC1090"
export RUST_SRC_PATH=$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src

path=(
    $HOME/bin
    $HOME/.local/bin
    $HOME/tool/go/bin
    $HOME/qt/$QT_VERSION/gcc_64/bin
    $GOPATH/bin
    $HOME/.cargo/bin
    /snap/bin
    $HOME/.yarn/bin
    $HOME/.config/yarn/global/node_modules/.bin
    $HOME/node_modules/.bin
    /usr/local/{sbin,bin}
    /usr/{sbin,bin}
    /{sbin,bin}
    $path
)
fpath=(
    $HOME/.vim/etc/fpath
    $fpath
)

# key bindings
bindkey -e  # Use emacs key bindings
# for tig
bindkey -- "\e[1~" beginning-of-line
bindkey -- "\e[4~" end-of-line

function soft_update() {
    zplugin self-update
    zplugin update --all
    zplugin compile --all

    pushd ~/.fzf > /dev/null && git pull && ./install <<EOF
    y
EOF
    popd

    pushd ~/.tmux/tmux-resurrect > /dev/null && git pull && popd

    if [ -f "$HOME/bin/z.lua" ]; then
        pushd ~/bin && curl -LO https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua && popd
    fi

    #if [ -d "$HOME/.pyenv" ]; then
    #    pushd ~/.pyenv && git pull && popd
    #fi
}

# fzf
[ ! -d ~/.fzf ] && {
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install <<EOF
    y
EOF
}
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# z.lua
[ ! -f $HOME/bin/z.lua ] && {
    mkdir -p ~/bin
    pushd ~/bin > /dev/null && curl -LO https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua && popd > /dev/null
}
export _ZL_FZF_FLAG="-e"
eval "$(lua $HOME/bin/z.lua --init zsh once enhanced)"
function _z() { _zlua "$@"; }
alias zr='_z -r'
alias zt='_z -t'
alias zl='_z -l'
alias zc='_z -c'
alias ze='_z -e'
alias zx='_z -x'
alias zi='_z -i'
alias zf='_z -I'
alias zb='_z -b'
alias zh='_z -I -t .'
function z_dirstack(){
    if [ -z "$*" ]; then
        _zlua --
    else
        _zlua -"$@"
    fi
}
alias d=' z_dirstack'

# pyenv
#export PYENV_ROOT="$HOME/.pyenv"
#export PYTHON_CONFIGURE_OPTS="--enable-shared"
#alias pyenv_init='git clone https://github.com/pyenv/pyenv.git ~/.pyenv --depth 1'

# tmux
if [ ! -d "$HOME/.tmux/tmux-resurrect" ]; then
    mkdir -p $HOME/.tmux
    git clone https://github.com/fcying/tmux-resurrect $HOME/.tmux/tmux-resurrect --depth=1
fi

# linuxbrew
BREW_PREFIX=""
if [ -d "$HOME/.linuxbrew/bin" ]; then
    BREW_PREFIX=$HOME/.linuxbrew
    export FPATH="$BREW_PREFIX/share/zsh/site-functions:$FPATH"
elif [ -d "/home/linuxbrew/.linuxbrew/bin" ]; then
    BREW_PREFIX=/home/linuxbrew/.linuxbrew
fi
if [ ! -z "$BREW_PREFIX" ]; then
    alias brew=$BREW_PREFIX/bin/brew
    export MANPATH="$BREW_PREFIX/share/man:$MANPATH"
    export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"
fi


# PROMPT
ZSH_HIDE_DIRTY=${ZSH_HIDE_DIRTY:-1}
ZSH_GIT_PROMPT_PREFIX=${ZSH_GIT_PROMPT_PREFIX:-"‹"}
ZSH_GIT_PROMPT_SUFFIX=${ZSH_GIT_PROMPT_SUFFIX:-"›"}
ZSH_GIT_PROMPT_DIRTY=${ZSH_GIT_PROMPT_DIRTY:-"*"}
ZSH_GIT_PROMPT_CLEAN=${ZSH_GIT_PROMPT_CLEAN:-""}
function _parse_git_dirty() {
    local STATUS=''
    local -a FLAGS
    if [ "$ZSH_HIDE_DIRTY" -eq "0" ]; then
        FLAGS=('--porcelain')
        if [[ $POST_1_7_2_GIT -gt 0 ]]; then
            FLAGS+='--ignore-submodules=dirty'
        fi
        if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
            FLAGS+='--untracked-files=no'
        fi
        STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
        if [[ -n $STATUS ]]; then
            echo "$ZSH_GIT_PROMPT_DIRTY"
        else
            echo "$ZSH_GIT_PROMPT_CLEAN"
        fi
    fi
}
function _git_prompt_info() {
    local ref
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    echo "$ZSH_GIT_PROMPT_PREFIX${ref#refs/heads/}$(_parse_git_dirty)$ZSH_GIT_PROMPT_SUFFIX"
}
setopt PROMPT_SUBST
PROMPT='%F{green}%n@%m%f:%B%F{blue}%~%b%f %F{red}$(_git_prompt_info)%f%(!.#.$) '
#RPROMPT='%F{blue}$(date +%H:%M:%S)'

# Predictable SSH authentication socket location.
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]; then
    rm -f /tmp/ssh-agent-$USER-screen
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi

# history
HISTFILE="$HOME/.zhistory"
HISTSIZE=10000
SAVEHIST=10000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
unsetopt INC_APPEND_HISTORY      # Write to the history file immediately, not when the shell exits.
unsetopt SHARE_HISTORY           # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
unsetopt HIST_BEEP               # Beep when accessing non-existent history.
unsetopt CDABLE_VARS             # Change directory to a path stored in a variable.

# bash like
setopt nonomatch
autoload -Uz +X bashcompinit && bashcompinit
autoload -Uz select-word-style
select-word-style bash

# pacman
alias pacsyu='sudo pacman -Syu'
alias pacsy='sudo pacman -Sy'
alias pacfs='pacman -Fs'
alias pacfy='sudo pacman -Fy'
alias pacql='pacman -Ql'
alias pacs='sudo pacman -S'
alias pacu='sudo pacman -U'
alias pacautoremove='sudo pacman -Rs $(pacman -Qtdq)'
alias pacrns='sudo pacman -Rns'

function cdls { builtin cd "$@" && ls --color=auto; }
alias cd='cdls'
alias zsh_history_clean='sort -t ";" -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history'
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
alias vi='vim'
alias py='python3'
alias py2='python2'
alias py3='python3'
alias ls='ls --color=auto'
alias ll='ls -alh'
alias tmux=' tmux -2'
alias ta=' tmux a; [ $? == 1 ] && tmux'
alias tl=' tmux ls'
alias rs='rsync -rvazl --partial --delete --progress '
alias cpa='cp -rfavx '
alias rgn='rg --no-ignore '
alias rgf='rg --files'
alias free_memory='sudo sync && sudo sync && sudo sh -c "echo 3 > /proc/sys/vm/drop_caches"'
alias cpu_bench='time echo "scale=5000; 4*a(1)" | bc -l -q'
alias zsh_time_test='for i in $(seq 1 5); do time zsh -i -c exit; done'
test_true_color() {
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}
test_highlight() {
    print -zr '
# Subshell, assignments, math-mode
echo $(cat /etc/hosts |& grep -i "hello337")
local param1="text ${+variable[test]} text ${var} text"; typeset param2='"'"'other $variable'"'"'
math=$(( 10 + HISTSIZ + HISTSIZE + $SAVEHIST )) size=$(( 0 ))

# Programming-like usage, bracket matching - through distinct colors; note the backslash quoting
for (( ii = 1; ii <= size; ++ ii )); do
    if [[ "${cmds[ii]} string" = "| string" ]]
    then
        sidx=${buffer[(in:ii:)\$\(?#[^\\\\]\)]} # find opening cmd-subst
        (( sidx <= len + 100 )) && {
            eidx=${buffer[(b:sidx:ii)[^\\\\]\)]} # find closing cmd-subst
        }
    fi
done

# Regular command-line usage
repeat 0 {
    zsh -i -c "cat /etc/shells* | grep -x --line-buffered -i '"'/bin/zsh'"'"
    builtin exit $return_value
    fast-theme -tq default
    fsh-alias -tq default-X # alias '"'"'fsh-alias=fast-theme'"'"' works just like the previous line
    command -v git | grep ".+git" && echo $'"'"'Git is installed'"'"'
    git checkout -m --ours /etc/shells && git status-X
    gem install asciidoctor
    cat <<<$PATH | tr : \\n > /dev/null 2>/usr/local
    man -a fopen fopen-X
    CFLAGS="-g -Wall -O0" ./configure
}
'
}


alias install_brew='sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"'
alias brew_autoremove='brew bundle dump && brew bundle --force cleanup && rm Brewfile'
alias brew_install_ruby='brew vendor-install ruby'

export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo'
#export REPO_URL='https://gerrit-googlesource.proxy.ustclug.org/git-repo'
alias repo_sync='while true; do repo sync; if [ $? -eq 0 ]; then echo "sync ok"; break; fi; done'

alias kmsg='adb wait-for-device && adb root && adb wait-for-device && adb shell "while true; do (cat proc/kmsg); done;"'
export USE_CCACHE=1


### Added by Zplugin's installer
if [ ! -f "$HOME/.zplugin/bin/zplugin.zsh" ]; then
    zplugin_init="true"
    mkdir ~/.zplugin
    git clone --depth 1 https://github.com/zdharma/zplugin.git ~/.zplugin/bin
fi
source "$HOME/.zplugin/bin/zplugin.zsh"
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin
### End of Zplugin's installer chunk

zplugin ice wait"0" lucid; zplugin light caarlos0/zsh-mkc
zplugin ice wait"0" lucid; zplugin light changyuheng/fz

zplugin ice wait'0' lucid; zplugin light zsh-users/zsh-history-substring-search
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down

zplugin ice wait'0' lucid atload'_zsh_autosuggest_start'
zplugin light zsh-users/zsh-autosuggestions
bindkey '^K' autosuggest-accept

zplugin ice wait"0" lucid atinit"zpcompinit; zpcdreplay"
zplugin light zsh-users/zsh-syntax-highlighting
#zplugin light zdharma/fast-syntax-highlighting

zplugin ice wait"0" lucid
zplugin light zsh-users/zsh-completions

_null_plug_dir=${ZPLGM[PLUGINS_DIR]}/_local---null
if [[ ! -d $_null_plug_dir ]]; then
    echo "Creating zplugin 'null' plugin directory at: $_null_plug_dir"
    mkdir -p -- "$_null_plug_dir"
fi
unset _null_plug_dir
zplugin ice wait"1" lucid atload'PluginFinish'
zplugin light _local/null
function PluginFinish() {
    if [ -n "$zplugin_init" ]; then
        zplugin self-update
        zplugin compile --all
    fi
    source $CONFIG_DIR/zsh_plugin.zsh
    type LoadAfter >/dev/null 2>&1 && LoadAfter
}

#zprof
