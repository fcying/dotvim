#zmodload zsh/zprof

# shellcheck disable=SC2034,SC1117,SC2179,SC2015,SC2181,SC2032,SC2033,SC2154,SC2004
if [ -f "$HOME/.zshrc.local" ]; then
    source "$HOME/.zshrc.local"
fi

CONFIG_DIR=${CONFIG_DIR:-"$HOME/.vim/etc"}

export PAGER=${PAGER:-"less"}
export EDITOR="$VISUAL"
export BASH_ENV="$HOME/.bashenv"

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'


# wsl2 {{{
[ -d "/mnt/c" ] && [[ "$(uname -a)" == *microsoft* ]] && {
    export SCOOP=${SCOOP:-"/mnt/d/tool/scoop"}
    export PATH=$PATH:$SCOOP/shims
    alias cmd='/mnt/c/Windows/System32/cmd.exe'
    alias adb='$SCOOP/shims/adb.exe'
    alias fastboot='$SCOOP/shims/fastboot.exe'

    # run adb in ssh tmux
    if [ -z "$WSL_INTEROP" ]; then
        export WSL_INTEROP="/run/WSL/$(ls -t /run/WSL | head -1)"
    fi

    # https://github.com/rupor-github/wsl-ssh-agent#wsl-2-compatibility
    if [ -z "$SSH_AUTH_SOCK" ]; then
        export WSL2_AGENT=true
        export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
        if [ "$(ss -a | grep -c "$SSH_AUTH_SOCK")" -eq 0 ]; then
            rm -f "$SSH_AUTH_SOCK"
            ( setsid socat UNIX-LISTEN:"$SSH_AUTH_SOCK",fork EXEC:"$HOME/sync/bin/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) >/dev/null 2>&1
        elif [ ! -f "$SSH_AUTH_SOCK" ]; then
            kill "$(pgrep -f "[s]ocat.*$SSH_AUTH_SOCK")" 2>/dev/null
            ( setsid socat UNIX-LISTEN:"$SSH_AUTH_SOCK",fork EXEC:"$HOME/sync/bin/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) >/dev/null 2>&1
        fi
    fi
}

# screen-256color xterm-256color
#TERM=${ZSH_TERM:-"xterm-256color"}

# LANG zh_CN.UTF-8 en_US.UTF-8 {{{
export LANG=${ZSH_LANG:-"en_US.UTF-8"}
export LC_ALL=$LANG
export LANGUAGE=${ZSH_LANGUAGE:-"en_US:en"}


# path {{{
# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath PATH path

#export GO111MODULE=on
export GOPATH=$HOME/go
export GOPROXY=https://goproxy.cn,direct
export QT_DIR=${QT_DIR:-"$HOME/tool/Qt"}
export QT_VERSION=${QT_VERSION:-"5.15.2"}
#export QT_WEBKIT=true
#export QT_DEBUG_PLUGINS=1
LD_LIBRARY_PATH=$HOME/bin/lib:$QT_DIR/$QT_VERSION/gcc_64/lib:$LD_LIBRARY_PATH
PKG_CONFIG_PATH=$QT_DIR/$QT_VERSION/gcc_64/lib/pkgconfig:$PKG_CONFIG_PATH
PYTHONPATH=$PYTHONPATH:$CONFIG_DIR/python_script
export RIPGREP_CONFIG_PATH=$CONFIG_DIR/ripgreprc
export SHELLCHECK_OPTS="-e SC2164 -e SC1090"
export RUST_SRC_PATH=$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src

path=(
    "$HOME"/bin
    "$HOME"/.local/bin
    "$GOPATH"/bin
    "$HOME"/.cargo/bin
    "$HOME"/.npm/node_modules/.bin
    "$QT_DIR"/"$QT_VERSION"/gcc_64/bin
    /snap/bin
    /usr/local/{sbin,bin}
    /usr/{sbin,bin}
    /{sbin,bin}
    $path
)
fpath=(
    "$HOME"/.vim/etc/fpath
    $fpath
)

type nvim >/dev/null 2>&1 && {
    export VISUAL=${VISUAL:-"nvim"}
    alias vim='nvim'
    alias vi='nvim'
    alias vimdiff='nvim -d'
    alias nvim-qt="NVIM_GUI=1 nvim-qt"
    alias mvim='nvim -u ~/.vim/nvim_config/init.vim'
    alias tvim='nvim -u ~/test/nvim_config/init.lua'
}


# key bindings {{{
bindkey -e  # Use emacs key bindings
bindkey "\e[3~" delete-char

# for tig
bindkey -- "\e[1~" beginning-of-line
bindkey -- "\e[4~" end-of-line

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
# Emacs style
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line


### zinit {{{
ZINIT_DIR=$HOME/.zinit
if [ ! -f "$ZINIT_DIR/bin/zinit.zsh" ]; then
    zinit_inited="true"
    mkdir ~/.zinit
    git clone --depth 1 https://github.com/zdharma-continuum/zinit "$ZINIT_DIR"/bin
fi
source "$ZINIT_DIR/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

#zinit light Aloxaf/fzf-tab

zinit ice wait'0' lucid; zinit light changyuheng/fz
FZ_HISTORY_CD_CMD=_zlua

zinit ice wait'0' lucid; zinit light zsh-users/zsh-history-substring-search
bindkey -M emacs '^p' history-substring-search-up
bindkey -M emacs '^n' history-substring-search-down

# https://github.com/zsh-users/zsh-autosuggestions/issues/364#issuecomment-481423232
# some os 5.7.1 can't work also
if is-at-least 5.8; then
    zinit ice wait'0' lucid atload'_zsh_autosuggest_start'
    zinit light zsh-users/zsh-autosuggestions
else
    zinit light zsh-users/zsh-autosuggestions
    unset ZSH_AUTOSUGGEST_USE_ASYNC
fi
bindkey '^K' autosuggest-accept

zinit ice wait'0' lucid atinit'zpcompinit; zpcdreplay'
zinit light zsh-users/zsh-syntax-highlighting
#zinit light zdharma/fast-syntax-highlighting

zinit ice wait'0' blockf lucid
zinit light zsh-users/zsh-completions

function PluginFinish() {
    if [ -n "$zinit_inited" ]; then
        zinit self-update
        zinit compile --all
    fi
    source "$CONFIG_DIR"/zsh_plugin.zsh
    type LoadAfter >/dev/null 2>&1 && LoadAfter
}
zinit ice wait'0' lucid atload'PluginFinish'
zinit snippet /dev/null


# third party software {{{
function soft_update() {
    zinit self-update
    zinit update --all
    zinit compile --all

    pushd ~/.fzf > /dev/null && git pull && ./install <<EOF
    y
EOF
    popd

    tmux new-session -d "sleep 1" && sleep 0.1 && ~/.tmux/plugins/tpm/bin/update_plugins all

    if [ -f "$HOME/bin/z.lua" ]; then
        pushd ~/bin && curl -LO https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua && popd
    fi
}

# fzf {{{
[ ! -d ~/.fzf ] && {
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install <<EOF
    y
EOF
    ln -sf ~/.fzf/bin/fzf ~/bin/
}
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# z.lua {{{
[ ! -f "$HOME/bin/z.lua" ] && {
    # wsl1 need it
    # sudo apt install lua-filesystem

    mkdir -p ~/bin
    pushd ~/bin > /dev/null && curl -LO https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua && popd > /dev/null
}
export _ZL_HYPHEN=1
eval "$(lua "$HOME/bin/z.lua" --init zsh once enhanced)"
alias zz='z -c'      # restrict matches to subdirs of $PWD
alias zi='z -i'      # cd with interactive selection
alias zf='z -I'      # use fzf to select in multiple matches
alias zb='z -b'      # quickly cd to the parent directory
alias zh='z -I -t .'
function z_dirstack(){
    if [ -z "$*" ]; then
        _zlua --
    else
        _zlua -"$*"
    fi
}
alias d=' z_dirstack'

# tmux {{{
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    mkdir -p "$HOME/.tmux/plugins" && pushd "$_"
    git clone https://github.com/tmux-plugins/tpm --depth 1
    popd
    tmux new-session -d "sleep 1" && sleep 0.1 && ~/.tmux/plugins/tpm/bin/install_plugins
fi

# linuxbrew {{{
export BREW_REMOTE=${BREW_REMOTE:-"cn"}
if [[ "$BREW_REMOTE" == "cn" ]]; then
    #export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
    #export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
    #export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles"
    export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.ustc.edu.cn/brew.git"
    export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.ustc.edu.cn/homebrew-core.git"
    export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles/bottles"
fi
BREW_PREFIX=""
if [ -d "$HOME/.linuxbrew/bin" ]; then
    BREW_PREFIX=$HOME/.linuxbrew
elif [ -d "/home/linuxbrew/.linuxbrew/bin" ]; then
    BREW_PREFIX=/home/linuxbrew/.linuxbrew
fi
if [ ! -z "$BREW_PREFIX" ]; then
    export HOMEBREW_PREFIX="$BREW_PREFIX"
    export HOMEBREW_CELLAR="$BREW_PREFIX/Cellar"
    export MANPATH="$BREW_PREFIX/share/man:$MANPATH"
    export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"
    function brew() {
        PATH_TEMP=$PATH
        #export LDFLAGS="-R$HOMEBREW_PREFIX/lib"
        export PATH=$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$PATH
        $HOMEBREW_PREFIX/bin/brew "$@";
        export PATH=$PATH_TEMP
        unset PATH_TEMP
    }
    function brew_gcc() {
        type "$HOMEBREW_PREFIX/bin/gcc-$1" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            export HOMEBREW_CC=gcc-$1
            export HOMEBREW_CXX=g++-$1
            echo "brew set gcc version: $1"
        else
            echo "brew can't found gcc version: $1"
        fi
    }
    function brew_enable() {
        export PATH=$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$PATH
    }
    function brew_disable() {
        export PATH=${PATH##*"linuxbrew/sbin:"}
    }
fi
unset BREW_PREFIX
alias brew_autoremove='brew bundle dump && brew bundle --force cleanup && rm Brewfile'
alias brew_update='brew update && brew upgrade && brew cleanup --prune 7; brew doctor'
function brew_install() {
    if [[ "$1" == "origin" ]]; then
        bash -c "$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)"
    else
        echo "install from cdn"
        bash -c "$(curl -fsSL https://cdn.jsdelivr.net/gh/Homebrew/install@master/install.sh)"
    fi
}
function brew_set_mirror() {
    if [[ "$1" == "origin" ]]; then
        git -C "$(brew --repo)" remote set-url origin https://github.com/Homebrew/brew.git
        git -C "$(brew --repo homebrew/core)" remote set-url origin https://github.com/Homebrew/homebrew-core.git
        brew update-reset
    else
        git -C "$(brew --repo)" remote set-url origin $HOMEBREW_BREW_GIT_REMOTE
        git -C "$(brew --repo homebrew/core)" remote set-url origin $HOMEBREW_CORE_GIT_REMOTE
        brew update-reset
    fi
}
function brew_fix_ssl() {
    sed -i '/^insecure$/d' ~/.curlrc
    echo insecure >> ~/.curlrc
    git config --global http.sslVerify false
    HOMEBREW_CURLRC=1 brew reinstall openssl curl
    sed -i '/^insecure$/d' ~/.curlrc
    git config --global http.sslVerify true
}


# PROMPT {{{
ZSH_HIDE_DIRTY=${ZSH_HIDE_DIRTY:-1}
ZSH_GIT_PROMPT_PREFIX=${ZSH_GIT_PROMPT_PREFIX:-"‹"}
ZSH_GIT_PROMPT_SUFFIX=${ZSH_GIT_PROMPT_SUFFIX:-"›"}
ZSH_GIT_PROMPT_DIRTY=${ZSH_GIT_PROMPT_DIRTY:-"*"}
ZSH_GIT_PROMPT_CLEAN=${ZSH_GIT_PROMPT_CLEAN:-""}
function _parse_git_dirty() {
    local STATUS=''
    local -a FLAGS
    if [ "$ZSH_HIDE_DIRTY" -eq "0" ]; then
        FLAGS='--porcelain'
        if [[ $POST_1_7_2_GIT -gt 0 ]]; then
            FLAGS+=' --ignore-submodules=dirty'
        fi
        if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
            FLAGS+=' --untracked-files=no'
        fi
        STATUS=$(command git status "$FLAGS" 2> /dev/null | tail -n1)
        if [[ -n $STATUS ]]; then
            echo "$ZSH_GIT_PROMPT_DIRTY"
        else
            echo "$ZSH_GIT_PROMPT_CLEAN"
        fi
    fi
}
function _git_prompt_info() {
    local ref
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    echo "$ZSH_GIT_PROMPT_PREFIX${ref#refs/heads/}$(_parse_git_dirty)$ZSH_GIT_PROMPT_SUFFIX"
}
setopt PROMPT_SUBST
if [ -z "$CUSTOM_PROMPT" ]; then
    PROMPT='%F{green}%n@%m%f:%B%F{blue}%~%b%f %F{red}$(_git_prompt_info)%f%(!.#.$) '
else
    PROMPT=$CUSTOM_PROMPT
fi

old_sock=
function myprecmd() {
    # SSH_AUTH_SOCK {{{
    if [ -n "$TMUX" ] && [ -n "$SSH_AUTH_SOCK" ] && [ "$WSL2_AGENT" != "true" ]; then
        new_sock=$(find /tmp/ssh-* -type s -perm -700 -user "$USER" 2>/dev/null)
        if [ -n "$new_sock" ]; then
            new_sock=$(echo "$new_sock" | xargs ls -t | head -n 1)
            if [ "$old_sock" != "$new_sock" ]; then
                export SSH_AUTH_SOCK=$new_sock
                #ln -sf $new_sock ~/.ssh/ssh_auth_sock
                old_sock=$new_sock
            fi
        fi
    fi

    # alert when a process completes in tmux
    if [ -n "$TMUX" ]; then
        echo -n -e "\a"
    fi
}
add-zsh-hook precmd myprecmd

# setting {{{
stty -ixon                              # disable terminal <c-s>
setopt nobeep nohistbeep nolistbeep     # no beep
setopt rm_star_silent                   # silent rm
setopt interactive_comments
setopt hist_ignore_space

# history
HISTFILE="$HOME/.zhistory"
HISTSIZE=10000
SAVEHIST=10000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
unsetopt SHARE_HISTORY           # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
unsetopt HIST_BEEP               # Beep when accessing non-existent history.
unsetopt CDABLE_VARS             # Change directory to a path stored in a variable.

# bash like
setopt nonomatch
autoload -Uz +X bashcompinit && bashcompinit
autoload -Uz select-word-style
select-word-style bash

fg() {
    if [[ $# -eq 1 && $1 = - ]]; then
        builtin fg %-
    else
        builtin fg %"$*"
    fi
}
jobs() {
    if [[ $# -eq 1 && $1 = "-p" ]]; then
        builtin jobs -p | awk '{print $3}'
    else
        builtin jobs "$*"
    fi
}

# enable color support of ls and also add handy aliases
if [ -x "/usr/bin/dircolors" ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# pacman {{{
alias pacsyu='sudo pacman -Syu'
alias pacsy='sudo pacman -Sy'
alias pacfs='pacman -Fs'
alias pacfy='sudo pacman -Fy'
alias pacql='pacman -Ql'
alias pacs='sudo pacman -S'
alias pacu='sudo pacman -U'
alias pacautoremove='sudo pacman -Rs $(pacman -Qtdq)'
alias pacrns='sudo pacman -Rns'

function cdls { builtin cd "$@" && ls --color=auto; }
alias cd='cdls'
alias zsh_history_clean='sort -t ";" -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history'
alias zsh_fix_gw='compaudit |xargs chmod -R g-w'
alias zsh_time_test='for i in $(seq 1 5); do time zsh -i -c exit; done'
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
alias rz='rz -y'
alias py='python3'
alias py2='python2'
alias py3='python3'
alias ls='ls --color=auto'
alias ll='ls -alh'

function tmux_attach {
    if [ -n "$1" ]; then
        tmux a -t $1
        [ $? == 1 ] && tmux new -s $1
    else
        tmux a
        [ $? == 1 ] && tmux
    fi
}
alias ta=' tmux_attach'
alias tl=' tmux ls'
alias tk=' tmux kill-server'

alias rs='rsync -rval --partial --delete --progress '
alias cpa='cp -rfavx '
alias rgn='rg --no-ignore '
alias rgf='rg --files'
alias free_memory='sudo sync && sudo sync && sudo sh -c "echo 3 > /proc/sys/vm/drop_caches"'
alias cpu_bench='time echo "scale=5000; 4*a(1)" | bc -l -q'
test_true_color() {
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}

# project {{{
#export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo'
#export REPO_URL='https://gerrit-googlesource.proxy.ustclug.org/git-repo'
alias repo_sync='while true; do repo sync; if [ $? -eq 0 ]; then echo "sync ok"; break; fi; done'
export USE_CCACHE=1
function adb_logcat() {
    local search_opt
    [ -n "$1" ] && search_opt="| rg \"$*\"" || search_opt=""
    eval "while true; do adb logcat -v time $search_opt; sleep 3; done;"
}
function kmsg() {
    local search_opt
    adb wait-for-device && adb root && adb wait-for-device
    [ -n "$1" ] && search_opt="| rg -a \"$*\"" || search_opt=""
    eval "adb shell \"while true; do (cat proc/kmsg); done;\" $search_opt"
}
function adb_setenforce0() {
    adb wait-for-device
    adb root
    adb wait-for-device
    adb remount
    adb shell setenforce 0
}

#zprof
