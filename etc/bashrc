if [ -f "$HOME/.shrc.local" ]; then
    source "$HOME/.shrc.local"
fi

export CONFIG_DIR=${CONFIG_DIR:-"$HOME/.vim/etc"}
export ATUIN_CONFIG_DIR=${ATUIN_CONFIG_DIR:-"$CONFIG_DIR/atuin"}
if [ ! -d "$ATUIN_CONFIG_DIR" ]; then
    unset ATUIN_CONFIG_DIR
fi

export PAGER=${PAGER:-"less"}
export VISUAL=${VISUAL:-"nvim"}
export EDITOR="$VISUAL"

alias vim='nvim'
alias vi='vim'

# wsl2 {{{
[ -d "/mnt/c" ] && [[ "$(uname -a)" == *microsoft* ]] && {
    export SCOOP=${SCOOP:-"/mnt/d/tool/scoop"}
    export PATH=$PATH:$SCOOP/shims:/usr/lib/wsl/lib
    alias cmd='/mnt/c/Windows/System32/cmd.exe'
    alias adb='$SCOOP/shims/adb.exe'
    alias fastboot='$SCOOP/shims/fastboot.exe'
    alias wtail='/mnt/d/tool/msys64/usr/bin/tail.exe'

    # run adb in ssh tmux
    if [ -z "$WSL_INTEROP" ]; then
        export WSL_INTEROP="/run/WSL/$(ls -t /run/WSL | head -1)"
    fi
}

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth:erasedups
PROMPT_COMMAND="history -n; history -w; history -c; history -r; $PROMPT_COMMAND"

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]:BASH\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w:BASH\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls=' ls --color=auto'

    alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

alias ll=' ls -alh --time-style=long-iso'
alias exit=' exit'

alias ga='git add'
alias gaa='git add --all'
alias gca='git commit -v -a'
alias gca!='git commit -v -a --amend'
alias gcam='git commit -a -m'
alias gclean='git clean -fd'
alias gco='git checkout'
alias gd='git diff'
alias gf='git fetch'
alias gfa='git fetch --all --prune'
alias gst='git status'
alias gp='git push'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# android builder
function jack_server() {
    if [ "$1" == "restart" ]; then
        ./out/host/linux-x86/bin/jack-admin kill-server && ./out/host/linux-x86/bin/jack-admin start-server
    else
        export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx$1"
        ./out/host/linux-x86/bin/jack-admin kill-server && ./out/host/linux-x86/bin/jack-admin start-server
    fi
}

#export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g"
export LC_ALL=C
export USE_CCACHE=1


# pyenv
#export PYENV_ROOT="$HOME/.pyenv"

# fzf {{{
function fzf_setup() {
    local install=0
    if [ ! -d ~/.fzf ]; then
        install=1
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    elif [[ "$1" == "update" ]]; then
        install=1
        pushd ~/.fzf > /dev/null && git pull
    fi
    if [ $install -eq 1 ]; then
        popd
        ~/.fzf/install <<EOF
        y
EOF
        ln -sf ~/.fzf/bin/fzf ~/bin/
    fi
}
fzf_setup
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# atuin {{{
type atuin >/dev/null 2>&1 && {
    if [ ! -f "$HOME/.bash-preexec.sh" ]; then
        curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh
    fi
    source ~/.bash-preexec.sh
    eval "$(atuin init bash --disable-up-arrow)"
}

# z.lua {{{
function z_lua_setup() {
    # wsl1 need it
    # sudo apt install lua-filesystem
    if [[ ! -f "$HOME/bin/z.lua" ]] || [[ "$1" == "update" ]]; then
        mkdir -p ~/bin
        pushd ~/bin > /dev/null && curl -LO https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua
        popd
    fi
    export _ZL_HYPHEN=1
    alias zz='z -c'      # restrict matches to subdirs of $PWD
    alias zi='z -i'      # cd with interactive selection
    alias zf='z -I'      # use fzf to select in multiple matches
    alias zb='z -b'      # quickly cd to the parent directory
    alias zh='z -I -t .'
}
eval "$(lua $HOME/bin/z.lua --init bash once enhanced fzf)"
function z_dirstack(){
    if [ -z "$*" ]; then
        _zlua --
    else
        _zlua -"$*"
    fi
}
alias d=' z_dirstack'

export GOPATH=$HOME/go
PATH=$HOME/bin:$HOME/.local/bin:$HOME/tool/go/bin:$HOME/.cargo/bin:$PATH

# linuxbrew
BREW_PREFIX=""
if [ -d "$HOME/.linuxbrew/bin" ]; then
    BREW_PREFIX=$HOME/.linuxbrew
elif [ -d "/home/linuxbrew/.linuxbrew/bin" ]; then
    BREW_PREFIX=/home/linuxbrew/.linuxbrew
fi
if [ -n "$BREW_PREFIX" ]; then
    #export FPATH="$BREW_PREFIX/share/zsh/site-functions:$FPATH"    #error: function definition file not found
    export HOMEBREW_PREFIX="$BREW_PREFIX"
    export HOMEBREW_CELLAR="$BREW_PREFIX/Cellar"
    export MANPATH="$BREW_PREFIX/share/man:$MANPATH"
    export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"
    function brew() {
        PATH_TEMP=$PATH
        export PATH=$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$PATH
        $HOMEBREW_PREFIX/bin/brew "$@";
        export PATH=$PATH_TEMP
        unset PATH_TEMP
    }
    function brew_gcc() {
        type "$HOMEBREW_PREFIX/bin/gcc-$1" > /dev/null 2>&1
        if [ $? == 0 ]; then
            export HOMEBREW_CC=gcc-$1
            export HOMEBREW_CXX=g++-$1
            echo "brew set gcc version: $1"
        else
            echo "brew can't found gcc version: $1"
        fi
    }
    function brew_enable() {
        export PATH=$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$PATH
    }
    function brew_disable() {
        export PATH=${PATH##*"linuxbrew/sbin:"}
    }
fi
unset BREW_PREFIX
alias brew_autoremove='brew bundle dump && brew bundle --force cleanup && rm Brewfile'
function brew_doctor() {
    brew doctor $(brew doctor --list-checks | grep -v stray_headers)
}
function brew_update() { #{{{
    brew update
    brew upgrade
    brew cleanup --prune 7
    brew_doctor
}
function brew_install() {
    if [[ "$1" == "origin" ]]; then
        bash -c "$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)"
    else
        echo "install from cdn"
        bash -c "$(curl -fsSL https://cdn.jsdelivr.net/gh/Homebrew/install@master/install.sh)"
    fi
}

type LoadAfter >/dev/null 2>&1 && LoadAfter
